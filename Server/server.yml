Description: Pravin MJ/Udagram Project-Server Group Setup and App deployment

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to a resource names
    Type: String

  InstanceType:
    Description: The instance type to use
    Default: t3.small
    Type: String

  InstanceAMI:
    Description: AMI of the instance
    Type: String

  EnvironmentType:
    Description: choose environment type
    Type: String
    AllowedValues:
      - development
      - production

Conditions:
    isProduction: !Equals [ !Ref EnvironmentType, production]

Resources:  
    WebServerSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow ssh connection from bastion if required
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LBSecurityGroup
        Tags:
          - Key: name
            Value: !Sub ${EnvironmentName} SecGroup of EC2 instances

    WebHostsLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        ImageId: !If [ isProduction, !Ref InstanceAMI, ami-0bb5a904861ec247f]
        IamInstanceProfile:
          Fn::ImportValue:
            !Sub ${EnvironmentName}-InstanceProfile
        SecurityGroups:
        - !Ref WebServerSecGroup
        InstanceType: !If [ isProduction, t3.small, t2.micro]
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
            DeleteOnTermination: true
            VolumeType: "gp2"
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install unzip awscli -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            sudo rm index.html
            sudo aws s3 cp s3://udagram-s3-bucket-mjpcs/udacity.zip .
            sudo unzip -o udacity.zip
            sudo systemctl start apache2.service
            sudo snap install amazon-ssm-agent --classic
            sudo snap start amazon-ssm-agent

    WebHostAutoSG:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        LaunchConfigurationName: !Ref WebHostsLaunchConfig
        VPCZoneIdentifier:
          - Fn::ImportValue: !Sub "${EnvironmentName}-PRIVATE-NET"
        MinSize: 1
        MaxSize: 2
        DesiredCapacity: 1
        Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebHostAutoSecGroup
          PropagateAtLaunch: True
        TargetGroupARNs:
        - Ref: WebAppTargetGroup
      UpdatePolicy:
        AutoScalingReplacingUpdate:
          WillReplace: True


    LBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our load balancer
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        Tags:
          - Key: name
            Value: !Sub ${EnvironmentName} SecGroup of Load Balancer

    WebAppLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC-SN1"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC-SN2"
        SecurityGroups:
        - Ref: LBSecurityGroup

    Listener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
        LoadBalancerArn: !Ref WebAppLoadBalancer
        Port: 80
        Protocol: HTTP

    LoadBalancerListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
          Actions:
          - Type: forward
            TargetGroupArn: !Ref WebAppTargetGroup
          Conditions:
          - Field: path-pattern
            Values: [/]
          ListenerArn: !Ref Listener
          Priority: 1

    WebAppTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Port: 80
        Protocol: HTTP
        HealthCheckIntervalSeconds: 15
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 10
        HealthyThresholdCount: 2
        UnhealthyThresholdCount: 5
        VpcId: 
          Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"

    AutoScaleUpPolicy:
      Type: AWS::AutoScaling::ScalingPolicy
      Properties:
        AdjustmentType: ChangeInCapacity
        AutoScalingGroupName: !Ref WebHostAutoSG
        Cooldown: 120
        ScalingAdjustment: 1

    AutoScaleDownPolicy:
      Type: AWS::AutoScaling::ScalingPolicy
      Properties:
        AdjustmentType: ChangeInCapacity
        AutoScalingGroupName: !Ref WebHostAutoSG
        Cooldown: 500
        ScalingAdjustment: -1

    HighCPUAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: "CpuHigh"
        AlarmDescription: Scale-up if CPU usage is > 85% for 5 minutes
        MetricName: CPUUtilization
        Namespace: AWS/EC2
        Statistic: Average
        Period: 300
        EvaluationPeriods: 2
        Threshold: 85
        ComparisonOperator: GreaterThanThreshold
        AlarmActions:
        - !Ref AutoScaleUpPolicy
        Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebHostAutoSG

    LowCPUAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: Scale-down if CPU usage is < 75% for 5 minutes
        MetricName: CPUUtilization
        Namespace: AWS/EC2
        Statistic: Average
        Period: 300
        EvaluationPeriods: 2
        Threshold: 75
        ComparisonOperator: LessThanThreshold
        AlarmActions:
        - !Ref AutoScaleDownPolicy
        Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebHostAutoSG


    HighMemoryAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: "High-Memory"
        AlarmDescription: Scale-up if Memory usage is > 85% for 5 minutes
        MetricName: mem_used_percent
        Namespace: AWS/EC2
        Statistic: Average
        Period: 300
        EvaluationPeriods: 2
        Threshold: 85
        ComparisonOperator: GreaterThanThreshold
        AlarmActions:
        - !Ref AutoScaleUpPolicy
        Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebHostAutoSG

    LowMemoryAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: Scale-down if Memory usage is < 75% for 5 minutes
        MetricName:  mem_used_percent
        Namespace: AWS/EC2
        Statistic: Average
        Period: 300
        EvaluationPeriods: 2
        Threshold: 75
        ComparisonOperator: LessThanThreshold
        AlarmActions:
        - !Ref AutoScaleDownPolicy
        Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebHostAutoSG

Outputs:
 
  WebsiteURL:
    Description: Load balancer DNS name of the web application
    Value: !Sub http://${WebAppLoadBalancer.DNSName}
    Export:
      Name: !Sub ${EnvironmentName}-DNS-NAME
