Description: Pravin MJ / Deploy a high availability web app 

Parameters:
  EnvironmentName:
    Description: An environment name that will be added before the resources.
    Type: String

  VpcCIDR:
    Description: Enter an IP Range(CIDR Notation)
    Type: String

  CIDRPublicSubnet1:
    Description: CIRD block for public subnet 1 
    Type: String
    Default: "10.0.1.0/24"

  CIDRPublicSubnet2:
    Description: CIRD block for public subnet 2
    Type: String
    Default: "10.0.1.0/24"

  CIDRPrivateSubnet1:
    Description: CIRD block for public subnet 3
    Type: String
    Default: "10.0.2.0/24"

  CIDRPrivateSubnet2:
    Description: CIRD block for public subnet 4
    Type: String
    Default: "10.0.3.0/24"

  InstanceAMI:
    Description: AMI of the instance
    Type: String

  EnvironmentType:
    Description: choose environment type
    Type: String
    AllowedValues:
      - development
      - production

  BucketName:
    Description: choose a bucket name where web app zip is available. Upload zip file named as app.zip
    Type: String

Conditions:
    isProduction: !Equals [ !Ref EnvironmentType, production]
  

Resources:
  VPC:
    Description: This is the VPC network with CIDR range for the Environment
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Description: Internet Gateway tagged to an Environment
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Description: Gateway attachment connecting the VPC and Internetgateway
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Description: Public subnet 1 that will be created in AZ1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref CIDRPublicSubnet1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public-Subnet-AZ1

  PublicSubnet2:
    Description: Public subnet 2 that will be created in AZ2
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock:  !Ref CIDRPublicSubnet2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public-Subnet-AZ2

  PrivateSubnet1:
    Description: Private subnet 1 that will be created in AZ1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock:  !Ref CIDRPrivateSubnet1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private-Subnet-AZ1
  
  PrivateSubnet2:
    Description: Private subnet 2 that will be created in AZ2
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock:  !Ref CIDRPrivateSubnet2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private-Subnet-AZ2

  NATGateway1EIP:
    Description: Elastic IP for Public subnet1 gateway
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NATGateway2EIP:    
    Description: Elastic IP for Public subnet2 gateway
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NATGateway1:
    Description: NAT gateway for public subnet1 in AZ1
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NATGateway2:
    Description: NAT gateway for public subnet2 in AZ2
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName}-Public-Route

  DefaultPublicRoute: 
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteTableAssociationPublicSubnet1:
    Description: Route Table association for public subnet 1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  RouteTableAssociationPublicSubnet2:
    Description: Route Table association for public subnet 2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  DefaultPrivateRoute1: 
    Type: AWS::EC2::Route
    Properties: 
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  DefaultPrivateRoute2: 
    Type: AWS::EC2::Route
    Properties: 
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName}-Private-Route-AZ1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName}-Private-Route-AZ2
  
  RouteTableAssociationPrivateSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  RouteTableAssociationPrivateSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2 

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${EnvironmentName}-Role"
      Path: "/"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
  
  IAMPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${EnvironmentName}-Policies"
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: 
          - "ssm:Get*"
          - "s3:Get*"
          - "s3:List*"
          Resource: "arn:aws:s3:::*"
      Roles:
      - !Ref IAMRole
      
  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
      - !Ref IAMRole


  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: name
          Value: !Sub ${EnvironmentName}-Security Group of Load Balancer
      
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connection only through session manager
      VpcId: !Ref VPC
      SecurityGroupIngress:
      # - IpProtocol: tcp
      #   FromPort: 22
      #   ToPort: 22
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: name
          Value: !Sub ${EnvironmentName} Ec2 Instance SecurityGroup

  WebServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !If [ isProduction, !Ref InstanceAMI, ami-0bb5a904861ec247f]
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups:
      - !Ref WebServerSecurityGroup
      InstanceType: !If [ isProduction, t3.small, t2.micro]
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '15'
          DeleteOnTermination: true
          VolumeType: "gp2"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          sudo rm index.html
          sudo aws s3 cp s3://${BucketName}/app.zip .
          sudo unzip -o app.zip

          sudo systemctl start apache2.service

          # Get values from parameter store. For secrets used in App(Like DB access credentials, app secret key)
          aws ssm get-parameter --name AppSecretKey --with-decryption --output text --region us-east-1 > .secrets

          # Install and start ssm agent for using Session manager for secure access to private instances inplace of bastion host
          sudo snap install amazon-ssm-agent --classic
          sudo snap start amazon-ssm-agent

  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref WebServerLaunchConfig
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      DesiredCapacity: 4
      MinSize: 2
      MaxSize: 4
      TargetGroupARNs:
      - Ref: WebServerTargetGroup
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-Web Host Autoscaling
        PropagateAtLaunch: True
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: True

  WebServerLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebServerTargetGroup
      LoadBalancerArn: !Ref WebServerLoadBalancer


  LoadBalancerListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Priority: 1
        Actions:
        - Type: forward
          TargetGroupArn: !Ref WebServerTargetGroup
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref LoadBalancerListener

  
  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 6




Outputs: 
  VPC: 
    Description: Reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCID

  PublicSubnets:
    Description: Reference to the list of the created public network
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export:
      Name: !Sub ${EnvironmentName}-Public-SubNet

  PrivateSubnets:
    Description: Reference to the list of the created private network
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
    Export:
      Name: !Sub ${EnvironmentName}-Private-SubNet

  PublicSubnet1:
    Description: Public Subnet1 reference in the 1st availability zone
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-Public-Subnet-1

  PrivateSubnet1:
    Description: Private Subnet1 reference in the 1st availability zone
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-Private-Subnet-1
  
  PublicSubnet2: 
    Description: Public Subnet2 reference in the 1st availability zone
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-Public-Subnet-2

  PrivateSubnet2: 
    Description: Private Subnet2 reference in the 2nd availability zone
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-Private-Subnet-2
  
  CIDRPublicSubnet1:
    Description: Public Subnet1 CIDR block reference in the 1st availability zone
    Value: !Ref CIDRPublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-CIDR-Public-Subnet1

  CIDRPublicSubnet2:
    Description: Public Subnet2 CIDR block reference in the 2nd availability zone
    Value: !Ref CIDRPublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-CIDR-Public-Subnet2

  CIDRPrivateSubnet1:
    Description: Private Subnet1 CIDR block reference in the 1st availability zone
    Value: !Ref CIDRPrivateSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-Private-Subnet1-CIDR

  CIDRPrivateSubnet2:
    Description: Private Subnet2 CIDR block reference in the 2nd availability zone
    Value: !Ref CIDRPrivateSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-Private-Subnet2-CIDR
    
  IAMRole:
    Description: Reference to the IAM Role created for the Environment 
    Value: !Ref IAMRole
    Export:
      Name: !Sub ${EnvironmentName}-Role

  InstanceProfile:
    Description: Instance profile for the IAM Role
    Value: !Ref InstanceProfile
    Export:
      Name: !Sub ${EnvironmentName}-InstanceProfile

  WebServerAutoScalingGroup:
    Description: Reference to the Auto scaling web server group
    Value: !Ref WebServerAutoScalingGroup
    Export:
      Name: !Sub ${EnvironmentName}-AutoScalingGroup